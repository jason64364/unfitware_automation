name: Run AWS Login with OIDC and Deploy AWS MCP Infrastructure

# Trigger - 57
on: [push] 

concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  
jobs:
  AWS-login-and-test:
    runs-on: ubuntu-latest

    env:
      TF_STATE_BUCKET: tf-state-unfitware-2025-1
      TF_STATE_DYNAMODB_TABLE: tf-state-locks
      TF_WORKING_DIR: .

    # Sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
      # Checks-out the repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4
          
      # Get AWS Role With WebIdentity              
      - name: '"Configure AWS Credentials" Action for GitHub Actions on runner'
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: 'us-west-2' 
          role-to-assume: arn:aws:iam::438465144115:role/GitHubActions_PowerUser
          audience: sts.amazonaws.com
          retry-max-attempts: 3

      # - name: Read OIDC Token
      #   run: echo $ACTIONS_ID_TOKEN_REQUEST_URL
      # - name: Read OIDC Token
      #   run: echo $ACTIONS_ID_TOKEN_REQUEST_TOKEN

      - name: Ensure S3 bucket and DynamoDB table for Terraform state
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="${TF_STATE_BUCKET}"
          TABLE="${TF_STATE_DYNAMODB_TABLE}"
          REGION="${AWS_REGION}"
          WORKSPACE="main"

          # Create S3 bucket if missing
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
          #    $( [ "$REGION" != "us-west-2" ] && echo --create-bucket-configuration LocationConstraint="$REGION" )
          fi
          aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled

          # Create DynamoDB table if missing
          if ! aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$TABLE"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # - name: Terraform Import
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      #   run: |
      #     terraform import \
      #       aws_secretsmanager_secret.shopify_admin arn:aws:secretsmanager:us-west-2:438465144115:secret:shopify/admin-xlmuwX


      - name: Terraform Init (S3 backend)
        # working-directory: ${{ env.TF_WORKING_DIR}}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=state/${GITHUB_REF_NAME}shopify-mcp.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_DYNAMODB_TABLE}"

      - name: Select or create Terraform workspace
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          set -euo pipefail
          WORKSPACE="${GITHUB_REF_NAME}"

          # List all workspaces and check if the target exists
          if terraform workspace list | grep -qE "^\*?\\s*${WORKSPACE}\$"; then
            echo "Workspace '${WORKSPACE}' exists. Selecting it..."
            terraform workspace select "${WORKSPACE}"
          else
            echo "ðŸ†• Workspace '${WORKSPACE}' does not exist. Creating it..."
            terraform workspace new "${WORKSPACE}"
          fi        

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_shopify_myshopify_domain: ${{ secrets.SHOPIFY_MYSHOPIFY_DOMAIN }}
          TF_VAR_mcp_bearer: ${{ secrets.MCP_BEARER }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        run: terraform plan -out=tfplan -lock-timeout=5m

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

        ##############################
        # DEBUGGING STEP REMOVE LATER
        #############################

      - name: Show Terraform outputs
        run: terraform output || true

        ##############################
  
      - name: Grab Terraform outputs
        id: tfout
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
           echo "secret_name=$(terraform output -raw secret_name)" >> $GITHUB_OUTPUT
           echo "mcp_full_url=$(terraform output -raw mcp_full_url)" >> $GITHUB_OUTPUT

      - name: Put Shopify Admin token into Secrets Manager
        id: putsecret
        shell: bash
        env:
           SECRET_ID: ${{ steps.tfout.outputs.secret_name }}
           SHOPIFY_ADMIN_TOKEN: ${{ secrets.SHOPIFY_ADMIN_TOKEN }}
        run: |
           set -euo pipefail
           aws secretsmanager put-secret-value \
             --secret-id "$SECRET_ID" \
             --secret-string "$SHOPIFY_ADMIN_TOKEN"

      - name: Smoke test MCP (tools/list)
        shell: bash
        env:
        #  MCP_URL: ${{steps.tfout.outputs.mcp_full_url }}
          MCP_URL: "https://aws_apigatewayv2_api.http.api_endpoint/mcp"
          MCP_BEARER: ${{ secrets.MCP_BEARER }}
        run: |
          set -euo pipefail
          echo "Hitting: $MCP_URL"
          curl -sX POST "$MCP_URL" \
            -H "Authorization: Bearer $MCP_BEARER" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | jq .

      - name: Show connector URL
        run: |
          echo ""
      
