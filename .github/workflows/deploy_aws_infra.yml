name: Run AWS Login with OIDC and Deploy AWS MCP Infrastructure

# Trigger - 12
on: [push] 


permissions:
  id-token: write
  contents: read
  
jobs:
  AWS-login-and-test:
    runs-on: ubuntu-latest

    env:
      TF_STATE_BUCKET: tf-state-unfitware-2025-1
      TF_STATE_DYNAMODB_TABLE: tf-state-locks

    # Sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
      # Checks-out the repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4
          
      # Get AWS Role With WebIdentity              
      - name: '"Configure AWS Credentials" Action for GitHub Actions on runner'
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: 'us-west-2' 
          role-to-assume: arn:aws:iam::438465144115:role/GitHubActions_PowerUser
          audience: sts.amazonaws.com
          retry-max-attempts: 3

      - name: Read OIDC Token
        run: echo $ACTIONS_ID_TOKEN_REQUEST_URL
      - name: Read OIDC Token
        run: echo $ACTIONS_ID_TOKEN_REQUEST_TOKEN

      - name: Ensure S3 bucket and DynamoDB table for Terraform state
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="${TF_STATE_BUCKET}"
          TABLE="${TF_STATE_DYNAMODB_TABLE}"
          REGION="${AWS_REGION}"

          # Create S3 bucket if missing
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET" --region "$REGION" \
              $( [ "$REGION" != "us-east-1" ] && echo --create-bucket-configuration LocationConstraint="$REGION" )
          fi
          aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled

          # Create DynamoDB table if missing
          if ! aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            aws dynamodb wait table-exists --table-name "$TABLE"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # - name: Terraform Import
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      #   run: |
      #     terraform import \
      #       aws_secretsmanager_secret.shopify_admin arn:aws:secretsmanager:us-west-2:438465144115:secret:shopify/admin-xlmuwX


      - name: Terraform Init (S3 backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=state/shopify-mcp.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_DYNAMODB_TABLE}"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_shopify_myshopify_domain: ${{ secrets.SHOPIFY_MYSHOPIFY_DOMAIN }}
          TF_VAR_mcp_bearer: ${{ secrets.MCP_BEARER }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Grab Terraform outputs
        id: tfout
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "secret_name=$(terraform output -raw secret_name)" >> $GITHUB_OUTPUT
          echo "mcp_full_url=$(terraform output -raw mcp_full_url)" >> $GITHUB_OUTPUT

      - name: Put Shopify Admin token into Secrets Manager
        shell: bash
        env:
          SECRET_NAME: ${{ steps.tfout.outputs.secret_name }}
          SHOPIFY_ADMIN_TOKEN: ${{ secrets.SHOPIFY_ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          aws secretsmanager put-secret-value \
            --secret-id "${SECRET_NAME}" \
            --secret-string "${SHOPIFY_ADMIN_TOKEN}"

      - name: Smoke test MCP (tools/list)
        shell: bash
        env:
          MCP_URL: ${{ steps.tfout.outputs.mcp_full_url }}
          MCP_BEARER: ${{ secrets.MCP_BEARER }}
        run: |
          set -euo pipefail
          echo "Hitting: ${MCP_URL}"
          curl -sX POST "${MCP_URL}" \
            -H "Authorization: Bearer ${MCP_BEARER}" \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","id":1,"method":"tools/list"}' | jq .

      - name: Show connector URL
        run: |
          echo ""
      
      
      
      
      
      
      
      # Run the Terraform main.tf  
     # - name: Run Terraform      
     #  run: |
     #     cat $GITHUB_ENV
     #     terraform init
     #     terraform plan
     #     terraform apply -auto-approve
    #    # aws secretsmanager create-secret --name demo-secret --description "demo secret description" --secret-string "demo$ecret1234"

    #  - name: AWS Secrets Manager GitHub Action
        # You may pin to the exact commit or the version.
        # uses: aws-actions/aws-secretsmanager-get-secrets@1d6311ab61b4856de027ff508aac818ddc1e141b
     #   uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.7
    #    with:
          # One or more secret names, secret ARNs, or secret prefixes to retrieve
    #      secret-ids: 'arn:aws:secretsmanager:us-west-2:438465144115:secret:demo-secret-LE0Sh5' 
          # (Optional) If true, JSON secrets will be deserialized, creating a secret environment variable for each key-value pair.
    #      parse-json-secrets: 'true'
          # (Optional) Transforms environment variable name. Options: uppercase, lowercase, none. Default value: uppercase.
    #      name-transformation: 'uppercase'
           
          

  
