AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECS on Fargate with ALB using EXISTING VPC and subnets. Deploys http-echo container.

Parameters:
  EnvironmentName:
    Type: String
    Default: demo
    Description: A short name used to namespace resources.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC ID (e.g., vpc-0123456789abcdef0)
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
    Description: Existing subnet ID in AZ#1 (public or private with egress)
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: Existing subnet ID in AZ#2 (public or private with egress)
  ContainerImage:
    Type: String
    Default: hashicorp/http-echo:0.2.3
    Description: Container image to run (default prints text over HTTP).
  ContainerPort:
    Type: Number
    Default: 80
    Description: Container port for the web app.
  DesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
  TaskCpu:
    Type: String
    Default: '256'
    AllowedValues: ['256', '512', '1024', '2048', '4096']
    Description: Fargate CPU units.
  TaskMemory:
    Type: String
    Default: '512'
    AllowedValues: ['512', '1024', '2048', '3072', '4096', '5120', '6144', '7168', '8192', '9216', '10240', '11264', '12288', '13312', '14336', '15360', '16384', '30720']
    Description: Fargate memory (MiB).
  EchoText:
    Type: String
    Default: "Hello from ECS Fargate via CloudFormation!"
    Description: Text the http-echo container will return.
  HealthCheckPath:
    Type: String
    Default: /
    Description: ALB target health check path.
  AssignPublicIp:
    Type: String
    Default: ENABLED
    AllowedValues: [ENABLED, DISABLED]
    Description: ENABLED if subnets are public; DISABLED for private subnets with NAT.

Resources:
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-alb-sg'

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS service tasks security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-svc-sg'

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${EnvironmentName}-cluster'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${EnvironmentName}'
      RetentionInDays: 7

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-ecsTaskExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-task'
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Command:
            - -listen
            - !Sub ':${ContainerPort}'
            - -text
            - !Ref EchoText
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app
          Essential: true

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-tg'
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: !Ref ContainerPort
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher:
        HttpCode: '200-399'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${EnvironmentName}-alb'
      Scheme: internet-facing
      Subnets: [!Ref SubnetId1, !Ref SubnetId2]
      SecurityGroups: [!Ref ALBSG]
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Sub '${EnvironmentName}-service'
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref AssignPublicIp
          SecurityGroups: [!Ref ServiceSG]
          Subnets: [!Ref SubnetId1, !Ref SubnetId2]
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the ALB (open this in your browser)
    Value: !GetAtt LoadBalancer.DNSName
  ServiceName:
    Description: ECS Service name
    Value: !Ref Service
  ClusterName:
    Description: ECS Cluster name
    Value: !Ref Cluster
